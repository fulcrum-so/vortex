include "vortex-schema/flatbuffers/schema.fbs";

namespace vortex.scalar;

table Binary {
    value: [uint8];
}

table Bool {
    value: bool;
}

table List {
    value: [Scalar];
}

table Null {
}

// Since Rust doesn't support structs in a union, it would be very inefficient to wrap each primitive type in a table.
// So instead we store a PType and a byte vector.
enum PType: uint8 {
    U8,
    U16,
    U32,
    U64,
    I8,
    I16,
    I32,
    I64,
    F16,
    F32,
    F64,
}

table Primitive {
    ptype: PType;
    bytes: [uint8];
}

table Struct_ {
    names: [string];
    value: [Scalar];
}

table UTF8 {
    value: string;
}

table Composite {
    value: Scalar;
}

union Type {
    Binary,
    Bool,
    List,
    Null,
    Primitive,
    Struct_,
    UTF8,
    Composite,
}

table Scalar {
  type: Type;
}

root_type Scalar;